How did viewing a diff between two versions of a file help you to see the bug that was
introduced?
It pointed out the the difference between the two files helping me to identify
the typo easily by matching the corresponding lines of code.

How could having easy access to the entire history of a file make you a more efficient
programmer in the long term?
When working on a big project, having the entire history helps to rollback to previous
working version when a bug is encountered.

What do you think are thr pros and cons of manually choosing when to create a commit,
like you do in git, vs having versions automatically savedm like google docs does?
Pros :
- We can choose when to make a commit at a logical point.
- Commits are always correct and ensure that the code is working
- Names can be goven to commits to understand the flow later.
Cons:
- User needs to remember to manually make commits a logical intervals.

Why do you think some version control systems, like Git, allow saving multiple files in
one commit, while others, like google docs, treat each file separately?
Allowing saving of multiple files help keep track of changes made acroos multiple files
between commits and to keep track of the timeline in a project cycle.

How can you use the commands git log and git diff to view the history of files?
Git log command helps to browse through the set of off all commits performed in the 
repository. Git diff commands helps to see the changes made between any two commits in 
a repository.

How might using a version control make you more confident to make changes that could 
break something?
It gives the flexibility to the user to confidently make changes because even if something breaks, it can be restored by checking out a previous commit and fixing the bug.

Now that you have your workspace set up, what do you want to try using Git for?
I would like to try Git to create a small project and try the various commands on them 
and the version management on the project.